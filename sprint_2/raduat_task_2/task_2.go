package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

/*
Этот код сначала разбивает входную строку на токены, а затем обрабатывает каждый токен.
Если токен является оператором, он применяет этот оператор к двум последним числам в стеке и заменяет их результатом.
Если токен является числом, он добавляет это число в стек.
В конце вычисления в стеке должно остаться только одно число, которое и является результатом вычисления выражения.
Если в стеке остается больше одного числа, это означает, что входное выражение было некорректным.

Обратите внимание, что этот код не обрабатывает некоторые возможные ошибки, такие как деление на ноль или некорректные токены.
В реальном приложении вам, возможно, потребуется добавить дополнительные проверки для обработки таких ситуаций.

Обратная польская нотация (ОПН), также известная как постфиксная нотация, это метод записи математических и логических выражений, где операторы расположены после своих операндов.
Это противоположно более общепринятой инфиксной нотации, где операторы расположены между операндами.

Алгоритм обратной польской нотации работает следующим образом:

Создание стека: В начале создается пустой стек для хранения чисел.

Чтение символов: Затем алгоритм читает символы входного выражения по одному.
Если символ является числом, он помещается в стек.
Если символ является оператором, то из стека извлекаются два верхних числа, над которыми выполняется операция, и результат помещается обратно в стек.

Вычисление результата: Этот процесс повторяется до тех пор, пока не будут прочитаны все символы входного выражения.
В конце в стеке должно остаться только одно число, которое является результатом вычисления выражения.

Основное преимущество обратной польской нотации заключается в том, что она упрощает вычисление выражений, устраняя необходимость в скобках для определения порядка операций.
Это делает ее особенно полезной в областях, где скорость и простота вычислений имеют первостепенное значение, например, в компьютерных науках и инженерии.
*/

func calculateRPN(input string) (int, error) {
	tokens := strings.Split(input, " ")
	stack := make([]int, 0)

	for _, token := range tokens {
		switch token {
		case "+", "-", "*", "/":
			if len(stack) < 2 {
				return 0, fmt.Errorf("недостаточно операндов для операции %s", token)
			}
			b := stack[len(stack)-1]
			a := stack[len(stack)-2]
			stack = stack[:len(stack)-2]

			var result int
			switch token {
			case "+":
				result = a + b
			case "-":
				result = a - b
			case "*":
				result = a * b
			case "/":
				if b == 0 {
					return 0, fmt.Errorf("деление на ноль")
				}
				result = a / b
			}

			stack = append(stack, result)
		default:
			num, err := strconv.Atoi(token)
			if err != nil {
				return 0, fmt.Errorf("некорректный токен %s", token)
			}
			stack = append(stack, num)
		}
	}

	if len(stack) != 1 {
		return 0, fmt.Errorf("некорректное выражение")
	}

	return stack[0], nil
}

func main() {
	const maxCapacity = 150 * 1024 * 1024
	buf := make([]byte, maxCapacity)

	scanner := bufio.NewScanner(os.Stdin)
	scanner.Buffer(buf, maxCapacity)

	var inputData []string
	for scanner.Scan() {
		line := scanner.Text()
		inputData = append(inputData, line)
		if line == "" {
			break
		}
	}

	result, err := calculateRPN(inputData[0])
	if err != nil {
		fmt.Println("Ошибка:", err)
	} else {
		fmt.Println(result)
	}
}
